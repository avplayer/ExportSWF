<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   minWidth="800" minHeight="600" backgroundColor="#424242" contentBackgroundColor="#424242">
	<fx:Script>
		<![CDATA[
			import com.github.hyqhyq3.Exporter;
			import com.github.hyqhyq3.ZeroPadded;
			
			import mx.collections.ArrayList;
			import mx.graphics.codec.PNGEncoder;
			import mx.utils.StringUtil;
			private var file:File;
			
			private var loader:Loader;
			
			private var images:ArrayList = new ArrayList();
			
			private var movieClips:Object;
			
			[Bindable]
			private var exportPath:String;
			
			protected function browseInputFile_clickHandler(event:MouseEvent):void
			{
				file = new File;
				file.browse([new FileFilter("swf files", "*.swf", "SWF")]);
				file.addEventListener(Event.SELECT, onSelected);
			}
			
			protected function onSelected(event:Event):void
			{
				images.removeAll();
				inputFile.text = file.nativePath;
				file.load();
				file.addEventListener(Event.COMPLETE, onLoadComplete);
			}
			
			protected function onLoadComplete(event:Event):void
			{
				var ad:ApplicationDomain = new ApplicationDomain;
				var lc:LoaderContext =  new LoaderContext(false, ad);
				lc.allowCodeImport = true;
				loader = new Loader();
				loader.loadBytes(file.data, lc);
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onSwfLoadComplete);
			}
			
			private function nextFrame(mc:MovieClip):void
			{
				mc.nextFrame();
				for(var i = 0; i < mc.numChildren; i++)
				{
					var childMC:MovieClip = mc.getChildAt(i) as MovieClip;
					if(childMC)
						nextFrame(childMC);
				}
			}
			
			private function dumpMC(mc:MovieClip):void
			{
				var bd:BitmapData;
				var mcBounds:Rectangle = new Rectangle();
				var items:Array = [];
				var offsetX:Number = 1000;
				var offsetY:Number = 1000;
				movieClips[mc.name] = [];
				for(var i = 0; i < mc.totalFrames; i++)
				{
					var bounds:Rectangle = mc.getBounds(mc);
					bd = new BitmapData(bounds.width + offsetX * 2, bounds.height + offsetY * 2, true, 0);
					var matrix:Matrix = new Matrix();
					matrix.translate(offsetX, offsetY);
					
					bd.draw(mc, matrix);
					items.push(bd);
					nextFrame(mc);
					mcBounds = mcBounds.union(bounds);
				}
				
				for(var i = 0; i < items.length; i++)
				{
					var bd:BitmapData = new BitmapData(mcBounds.width, mcBounds.height, true, 0);
					var matrix:Matrix = new Matrix();
					matrix.translate(-offsetX - mcBounds.left, -offsetY - mcBounds.top);
					bd.draw(items[i], matrix);
					images.addItem({bitmap:bd, name:mc.name});
					movieClips[mc.name].push({
						bitmap: bd, 
						w: Math.ceil(mcBounds.width), 
						h: Math.ceil(mcBounds.height), 
						name: mc.name + ZeroPadded.uint_Zeropadded(i, 4)
					});
				}
				mc.x = -mcBounds.left;
				mc.y = -mcBounds.top;
				
				trace(mc.name);
				trace(mcBounds.left, mcBounds.top, mc.width, mc.height);
				
			}
			
			protected function onSwfLoadComplete(event:Event):void
			{
				var container:MovieClip = event.target.content as MovieClip;
				movieClips = {};
				trace(container.numChildren);
				for(var i = 0; i < container.numChildren; i++)
				{
					var mc:MovieClip = container.getChildAt(i) as MovieClip;
					if(mc)
					{
						dumpMC(mc);
						mc.play();
					}
				}
			}
			
			var saveFile:File;
			protected function browseExportPath_clickHandler(event:MouseEvent):void
			{
				saveFile = new File();
				saveFile.browseForDirectory("select export path");
				saveFile.addEventListener(Event.SELECT, onExportPathSelected);
			}
			
			protected function onExportPathSelected(event:Event):void
			{
				exportPath = saveFile.nativePath;
			}
			
			protected function exportSingleFile_clickHandler(event:MouseEvent):void
			{
				var name:String = file.name.split(".")[0];
				var exporter:Exporter = new Exporter(movieClips, exportPath, true, name);
				exporter.doExport();
			}
			
			
			protected function export_clickHandler(event:MouseEvent):void
			{
				var exporter:Exporter = new Exporter(movieClips, exportPath, false);
				exporter.doExport();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<s:Group>
		
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		
		<s:Group id="inputFileBox">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			<s:TextInput id="inputFile" editable="false"/>
			<s:Button id="browseInputFile" label="browse input file"
					  click="browseInputFile_clickHandler(event)"/>
		</s:Group>
		<s:Group>
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			<s:List width="600" height="400" dataProvider="{images}" horizontalScrollPolicy="on"
					itemRenderer="com.github.hyqhyq3.ImageItem">
				<s:layout>
					<s:HorizontalLayout/>
				</s:layout>
			</s:List>
			
			<mx:UIComponent id="ui"/>
		</s:Group>
		<s:Label id="totalFrames" text="{images.length}"/>
		<s:Group>
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			<s:Label>
				导出路径：
			</s:Label>
			<s:TextInput id="exportPathText" text="@{exportPath}"/>
			<s:Button id="browseExportPath" label="browse export path"
					  click="browseExportPath_clickHandler(event)"/>
		</s:Group>
		<s:HGroup width="200">
			<s:Button id="exportSingleFile" label="Export single file" click="exportSingleFile_clickHandler(event)" enabled="{exportPath.length &gt; 0}"/>
			<s:Button id="export" label="Export" click="export_clickHandler(event)"
					  enabled="{exportPath.length &gt; 0}"/>
		</s:HGroup>
	</s:Group>
</s:WindowedApplication>
